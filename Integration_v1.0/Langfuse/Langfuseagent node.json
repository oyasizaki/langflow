{"id":"8c0ed08a-10e8-4f32-961f-a51ee3cbef57","name":"Langfuseagent","data":{"edges":[],"nodes":[{"data":{"id":"groupComponent-83Ize","type":"GroupNode","node":{"display_name":"Langfuseagent","documentation":"","description":"Toolcaliingagent with langfuse callback","template":{"code_CustomComponent-fpMef":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\r\nfrom langflow.field_typing import Data\r\nfrom langfuse.callback import CallbackHandler\r\nfrom typing import Optional, Union, Callable, List\r\nfrom langchain_core.callbacks import BaseCallbackHandler\r\nfrom langfuse import Langfuse\r\nfrom langflow.services.database.utils import session_getter\r\n\r\nclass CallbackLangfuse(CustomComponent):\r\n    display_name = \"Langfuse CallbackHandler\"\r\n    description = \"Handler for Langfuse\"\r\n    field_order = [\"public_key\", \"secret_key\", \"host\", \"release\", \"version\", \"handlertype\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"public_key\": {\r\n                \"display_name\": \"Langfuse Public Key\", \r\n                \"password\": True,\r\n                \"advanced\": False\r\n            },\r\n            \"secret_key\": {\r\n                \"display_name\": \"Langfuse Secret Key\", \r\n                \"password\": True,\r\n                \"advanced\": False\r\n            },\r\n            \"host\": {\r\n                \"display_name\": \"Langfuse Host URL\", \r\n                \"value\": \"https://cloud.langfuse.com\",\r\n                \"advanced\": False\r\n            },\r\n            \"release\": {\r\n                \"display_name\": \"Release\", \r\n                \"value\": \"beta\",\r\n                \"advanced\": True\r\n            },\r\n            \"version\": {\r\n                \"display_name\": \"Version\", \r\n                \"value\": \"0.0.1\",\r\n                \"advanced\": True\r\n            },\r\n            \"handlertype\": {\r\n                \"options\": [\"trace\", \"span\"],\r\n                \"info\": \"Type of handler to use for Langfuse.\",\r\n                \"advanced\": False\r\n            },\r\n        }\r\n\r\n    def build(self, public_key: str, secret_key: str, host: str, handlertype: str, session_id: Optional[str] = \"Default Session\", trace_name: Optional[str] = None, user_id: Optional[str] = None, release: Optional[str] = None, version: Optional[str] = None) -> BaseCallbackHandler:\r\n        langfuse = Langfuse(\r\n            public_key=public_key,\r\n            secret_key=secret_key,\r\n            host=host\r\n        )\r\n\r\n        langfuse.auth_check()\r\n\r\n        trace = langfuse.trace(\r\n            name=trace_name or \"default_trace_name\", \r\n            user_id=user_id,\r\n            session_id=session_id,\r\n            release=release,\r\n            version=version\r\n        )\r\n\r\n        span = trace.span()\r\n\r\n        if handlertype == \"trace\":\r\n            return trace.get_langchain_handler()\r\n        elif handlertype == \"span\":\r\n            return span.get_langchain_handler()\r\n        else:\r\n            return None\r\n\r\n        return trace\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false,"proxy":{"id":"CustomComponent-fpMef","field":"code"},"display_name":"Code"},"handlertype_CustomComponent-fpMef":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"options":["trace","span"],"name":"handlertype","advanced":false,"dynamic":false,"info":"Type of handler to use for Langfuse.","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"span","proxy":{"id":"CustomComponent-fpMef","field":"handlertype"},"display_name":"Handlertype"},"host_CustomComponent-fpMef":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"http://langfuse.yamon.io","fileTypes":[],"file_path":"","password":false,"name":"host","display_name":"Langfuse Host URL","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"proxy":{"id":"CustomComponent-fpMef","field":"host"}},"public_key_CustomComponent-fpMef":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"public_key","display_name":"Langfuse Public Key","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"","proxy":{"id":"CustomComponent-fpMef","field":"public_key"}},"release_CustomComponent-fpMef":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"beta","fileTypes":[],"file_path":"","password":false,"name":"release","display_name":"Release","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"proxy":{"id":"CustomComponent-fpMef","field":"release"}},"secret_key_CustomComponent-fpMef":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"secret_key","display_name":"Langfuse Secret Key","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"","proxy":{"id":"CustomComponent-fpMef","field":"secret_key"}},"session_id_CustomComponent-fpMef":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"reherhehr","fileTypes":[],"file_path":"","password":false,"name":"session_id","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"proxy":{"id":"CustomComponent-fpMef","field":"session_id"},"display_name":"Session Id"},"trace_name_CustomComponent-fpMef":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"trace_name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"","proxy":{"id":"CustomComponent-fpMef","field":"trace_name"},"display_name":"Trace Name"},"user_id_CustomComponent-fpMef":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"user_id","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"proxy":{"id":"CustomComponent-fpMef","field":"user_id"},"display_name":"User Id"},"version_CustomComponent-fpMef":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.0.1","fileTypes":[],"file_path":"","password":false,"name":"version","display_name":"Version","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"proxy":{"id":"CustomComponent-fpMef","field":"version"}},"llm_YamonToolCallingAgentCom-bwLIW":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"llm","display_name":"LLM","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"llm"}},"memory_YamonToolCallingAgentCom-bwLIW":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"memory","display_name":"Memory","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Memory to use for the agent.","title_case":false,"type":"other","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"memory"}},"tools_YamonToolCallingAgentCom-bwLIW":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"tools","display_name":"Tools","advanced":false,"input_types":["Tool"],"dynamic":false,"info":"","title_case":false,"type":"other","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"tools"}},"code_YamonToolCallingAgentCom-bwLIW":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Dict, List, cast\n\nfrom langchain.agents import AgentExecutor, BaseSingleActionAgent\nfrom langchain.agents.tool_calling_agent.base import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain.callbacks.base import BaseCallbackHandler\n\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass YamonToolCallingAgentCom(Component):\n    display_name: str = \"Yam Tool Calling Agent\"\n    description: str = \"Agent that uses tools. Only models that are compatible with function calling are supported.\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"YamonToolCallingAgentCom\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Input text to pass to the agent.\",\n        ),\n        MessageTextInput(\n            name=\"user_prompt\",\n            display_name=\"Prompt\",\n            info=\"This prompt must contain 'input' key.\",\n            value=\"{input}\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"handle_parsing_errors\",\n            display_name=\"Handle Parsing Errors\",\n            info=\"If True, the agent will handle parsing errors. If False, the agent will raise an error.\",\n            advanced=True,\n            value=True,\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            input_types=[\"Data\"],\n            info=\"Memory to use for the agent.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"LLM\",\n            input_types=[\"LanguageModel\"],\n        ),\n        HandleInput(\n            name=\"callbackList\",\n            display_name=\"callback\",\n            input_types=[\"BaseCallbackHandler\"],\n            info=\"callback\",\n            is_list=True,\n        ),               \n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"run_agent\"),\n    ]\n\n    async def run_agent(self) -> Message:\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\n                \"placeholder\",\n                \"{chat_history}\",\n            ),\n            (\"human\", self.user_prompt),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        agent = create_tool_calling_agent(self.llm, self.tools, prompt)\n\n        runnable = AgentExecutor.from_agent_and_tools(\n            agent=cast(BaseSingleActionAgent, agent),\n            tools=self.tools,\n            verbose=True,\n            handle_parsing_errors=self.handle_parsing_errors,\n            #config={\"callbacks\": lc_callback if lc_callback else []}    \n        )\n        input_dict: dict[str, str | list[Dict[str, str]]] = {\"input\": self.input_value}\n        if hasattr(self, \"memory\") and self.memory:\n            input_dict[\"chat_history\"] = self.convert_chat_history(self.memory)\n        #result = await runnable.ainvoke(input_dict)\n        result = await runnable.ainvoke(input_dict, config={\"callbacks\": self.callbackList if self.callbackList else []} )\n        if \"output\" not in result:\n            raise ValueError(\"Output key not found in result. Tried 'output'.\")\n\n        results = result[\"output\"]\n        if isinstance(results, list):\n            result_string = \"\\n\".join([r[\"text\"] for r in results if \"text\" in r and r.get(\"type\") == \"text\"])\n        else:\n            result_string = results\n        self.status = result_string\n        return Message(text=result_string)\n\n    def convert_chat_history(self, chat_history: List[Data]) -> List[Dict[str, str]]:\n        messages = []\n        for item in chat_history:\n            role = \"user\" if item.sender == \"User\" else \"assistant\"\n            messages.append({\"role\": role, \"content\": item.text})\n        return messages\n\n\n\n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false,"proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"code"},"display_name":"Code"},"handle_parsing_errors_YamonToolCallingAgentCom-bwLIW":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"handle_parsing_errors","display_name":"Handle Parsing Errors","advanced":true,"dynamic":false,"info":"If True, the agent will handle parsing errors. If False, the agent will raise an error.","title_case":false,"type":"bool","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"handle_parsing_errors"}},"input_value_YamonToolCallingAgentCom-bwLIW":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Inputs","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Input text to pass to the agent.","title_case":false,"type":"str","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"input_value"}},"system_prompt_YamonToolCallingAgentCom-bwLIW":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"You are a helpful assistant","name":"system_prompt","display_name":"System Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"system_prompt"}},"user_prompt_YamonToolCallingAgentCom-bwLIW":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{input}","name":"user_prompt","display_name":"Prompt","advanced":true,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str","proxy":{"id":"YamonToolCallingAgentCom-bwLIW","field":"user_prompt"}}},"flow":{"data":{"nodes":[{"id":"CustomComponent-fpMef","type":"genericNode","position":{"x":-293.770234533266,"y":-81.45285444710399},"data":{"type":"CustomComponent","node":{"template":{"_type":"CustomComponent","code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langflow import CustomComponent\r\nfrom langflow.field_typing import Data\r\nfrom langfuse.callback import CallbackHandler\r\nfrom typing import Optional, Union, Callable, List\r\nfrom langchain_core.callbacks import BaseCallbackHandler\r\nfrom langfuse import Langfuse\r\nfrom langflow.services.database.utils import session_getter\r\n\r\nclass CallbackLangfuse(CustomComponent):\r\n    display_name = \"Langfuse CallbackHandler\"\r\n    description = \"Handler for Langfuse\"\r\n    field_order = [\"public_key\", \"secret_key\", \"host\", \"release\", \"version\", \"handlertype\"]\r\n\r\n    def build_config(self):\r\n        return {\r\n            \"public_key\": {\r\n                \"display_name\": \"Langfuse Public Key\", \r\n                \"password\": True,\r\n                \"advanced\": False\r\n            },\r\n            \"secret_key\": {\r\n                \"display_name\": \"Langfuse Secret Key\", \r\n                \"password\": True,\r\n                \"advanced\": False\r\n            },\r\n            \"host\": {\r\n                \"display_name\": \"Langfuse Host URL\", \r\n                \"value\": \"https://cloud.langfuse.com\",\r\n                \"advanced\": False\r\n            },\r\n            \"release\": {\r\n                \"display_name\": \"Release\", \r\n                \"value\": \"beta\",\r\n                \"advanced\": True\r\n            },\r\n            \"version\": {\r\n                \"display_name\": \"Version\", \r\n                \"value\": \"0.0.1\",\r\n                \"advanced\": True\r\n            },\r\n            \"handlertype\": {\r\n                \"options\": [\"trace\", \"span\"],\r\n                \"info\": \"Type of handler to use for Langfuse.\",\r\n                \"advanced\": False\r\n            },\r\n        }\r\n\r\n    def build(self, public_key: str, secret_key: str, host: str, handlertype: str, session_id: Optional[str] = \"Default Session\", trace_name: Optional[str] = None, user_id: Optional[str] = None, release: Optional[str] = None, version: Optional[str] = None) -> BaseCallbackHandler:\r\n        langfuse = Langfuse(\r\n            public_key=public_key,\r\n            secret_key=secret_key,\r\n            host=host\r\n        )\r\n\r\n        langfuse.auth_check()\r\n\r\n        trace = langfuse.trace(\r\n            name=trace_name or \"default_trace_name\", \r\n            user_id=user_id,\r\n            session_id=session_id,\r\n            release=release,\r\n            version=version\r\n        )\r\n\r\n        span = trace.span()\r\n\r\n        if handlertype == \"trace\":\r\n            return trace.get_langchain_handler()\r\n        elif handlertype == \"span\":\r\n            return span.get_langchain_handler()\r\n        else:\r\n            return None\r\n\r\n        return trace\r\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handlertype":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"options":["trace","span"],"name":"handlertype","advanced":false,"dynamic":false,"info":"Type of handler to use for Langfuse.","load_from_db":false,"title_case":false,"input_types":["Text"],"value":"span"},"host":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"http://langfuse.yamon.io","fileTypes":[],"file_path":"","password":false,"name":"host","display_name":"Langfuse Host URL","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"public_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"public_key","display_name":"Langfuse Public Key","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":""},"release":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"beta","fileTypes":[],"file_path":"","password":false,"name":"release","display_name":"Release","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"secret_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"secret_key","display_name":"Langfuse Secret Key","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":""},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"reherhehr","fileTypes":[],"file_path":"","password":false,"name":"session_id","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"trace_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"trace_name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":""},"user_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"user_id","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"version":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.0.1","fileTypes":[],"file_path":"","password":false,"name":"version","display_name":"Version","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]}},"description":"Handler for Langfuse","base_classes":["BaseCallbackHandler","CallbackManagerMixin","ChainManagerMixin","LLMManagerMixin","object","RetrieverManagerMixin","RunManagerMixin","ToolManagerMixin"],"display_name":"Langfuse CallbackHandler","documentation":"","custom_fields":{"public_key":null,"secret_key":null,"host":null,"handlertype":null,"session_id":null,"trace_name":null,"user_id":null,"release":null,"version":null},"output_types":["BaseCallbackHandler"],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["BaseCallbackHandler"],"selected":"BaseCallbackHandler","name":"basecallbackhandler","hidden":false,"display_name":"BaseCallbackHandler","method":null,"value":"__UNDEFINED__","cache":true}],"field_order":["public_key","secret_key","host","release","version","handlertype"],"beta":false,"edited":false},"id":"CustomComponent-fpMef","description":"Handler for Langfuse","display_name":"Langfuse CallbackHandler"},"selected":true,"width":384,"height":870,"positionAbsolute":{"x":-293.770234533266,"y":-81.45285444710399},"dragging":false},{"id":"YamonToolCallingAgentCom-bwLIW","type":"genericNode","position":{"x":197.60062512070573,"y":-19.027801533235007},"data":{"type":"YamonToolCallingAgentCom","node":{"template":{"_type":"Component","callbackList":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"callbackList","display_name":"callback","advanced":false,"input_types":["BaseCallbackHandler"],"dynamic":false,"info":"callback","title_case":false,"type":"other"},"llm":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"llm","display_name":"LLM","advanced":false,"input_types":["LanguageModel"],"dynamic":false,"info":"","title_case":false,"type":"other"},"memory":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"memory","display_name":"Memory","advanced":false,"input_types":["Data"],"dynamic":false,"info":"Memory to use for the agent.","title_case":false,"type":"other"},"tools":{"trace_as_metadata":true,"list":true,"required":false,"placeholder":"","show":true,"value":"","name":"tools","display_name":"Tools","advanced":false,"input_types":["Tool"],"dynamic":false,"info":"","title_case":false,"type":"other"},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Dict, List, cast\n\nfrom langchain.agents import AgentExecutor, BaseSingleActionAgent\nfrom langchain.agents.tool_calling_agent.base import create_tool_calling_agent\nfrom langchain_core.prompts import ChatPromptTemplate\nfrom langchain.callbacks.base import BaseCallbackHandler\n\n\nfrom langflow.custom import Component\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass YamonToolCallingAgentCom(Component):\n    display_name: str = \"Yam Tool Calling Agent\"\n    description: str = \"Agent that uses tools. Only models that are compatible with function calling are supported.\"\n    icon = \"LangChain\"\n    beta = True\n    name = \"YamonToolCallingAgentCom\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"system_prompt\",\n            display_name=\"System Prompt\",\n            info=\"System prompt for the agent.\",\n            value=\"You are a helpful assistant\",\n        ),\n        MessageTextInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Input text to pass to the agent.\",\n        ),\n        MessageTextInput(\n            name=\"user_prompt\",\n            display_name=\"Prompt\",\n            info=\"This prompt must contain 'input' key.\",\n            value=\"{input}\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"handle_parsing_errors\",\n            display_name=\"Handle Parsing Errors\",\n            info=\"If True, the agent will handle parsing errors. If False, the agent will raise an error.\",\n            advanced=True,\n            value=True,\n        ),\n        HandleInput(\n            name=\"memory\",\n            display_name=\"Memory\",\n            input_types=[\"Data\"],\n            info=\"Memory to use for the agent.\",\n        ),\n        HandleInput(\n            name=\"tools\",\n            display_name=\"Tools\",\n            input_types=[\"Tool\"],\n            is_list=True,\n        ),\n        HandleInput(\n            name=\"llm\",\n            display_name=\"LLM\",\n            input_types=[\"LanguageModel\"],\n        ),\n        HandleInput(\n            name=\"callbackList\",\n            display_name=\"callback\",\n            input_types=[\"BaseCallbackHandler\"],\n            info=\"callback\",\n            is_list=True,\n        ),               \n    ]\n\n    outputs = [\n        Output(display_name=\"Text\", name=\"text_output\", method=\"run_agent\"),\n    ]\n\n    async def run_agent(self) -> Message:\n        if \"input\" not in self.user_prompt:\n            raise ValueError(\"Prompt must contain 'input' key.\")\n        messages = [\n            (\"system\", self.system_prompt),\n            (\n                \"placeholder\",\n                \"{chat_history}\",\n            ),\n            (\"human\", self.user_prompt),\n            (\"placeholder\", \"{agent_scratchpad}\"),\n        ]\n        prompt = ChatPromptTemplate.from_messages(messages)\n        agent = create_tool_calling_agent(self.llm, self.tools, prompt)\n\n        runnable = AgentExecutor.from_agent_and_tools(\n            agent=cast(BaseSingleActionAgent, agent),\n            tools=self.tools,\n            verbose=True,\n            handle_parsing_errors=self.handle_parsing_errors,\n            #config={\"callbacks\": lc_callback if lc_callback else []}    \n        )\n        input_dict: dict[str, str | list[Dict[str, str]]] = {\"input\": self.input_value}\n        if hasattr(self, \"memory\") and self.memory:\n            input_dict[\"chat_history\"] = self.convert_chat_history(self.memory)\n        #result = await runnable.ainvoke(input_dict)\n        result = await runnable.ainvoke(input_dict, config={\"callbacks\": self.callbackList if self.callbackList else []} )\n        if \"output\" not in result:\n            raise ValueError(\"Output key not found in result. Tried 'output'.\")\n\n        results = result[\"output\"]\n        if isinstance(results, list):\n            result_string = \"\\n\".join([r[\"text\"] for r in results if \"text\" in r and r.get(\"type\") == \"text\"])\n        else:\n            result_string = results\n        self.status = result_string\n        return Message(text=result_string)\n\n    def convert_chat_history(self, chat_history: List[Data]) -> List[Dict[str, str]]:\n        messages = []\n        for item in chat_history:\n            role = \"user\" if item.sender == \"User\" else \"assistant\"\n            messages.append({\"role\": role, \"content\": item.text})\n        return messages\n\n\n\n\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"handle_parsing_errors":{"trace_as_metadata":true,"list":false,"required":false,"placeholder":"","show":true,"value":true,"name":"handle_parsing_errors","display_name":"Handle Parsing Errors","advanced":true,"dynamic":false,"info":"If True, the agent will handle parsing errors. If False, the agent will raise an error.","title_case":false,"type":"bool"},"input_value":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"","name":"input_value","display_name":"Inputs","advanced":false,"input_types":["Message"],"dynamic":false,"info":"Input text to pass to the agent.","title_case":false,"type":"str"},"system_prompt":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"You are a helpful assistant","name":"system_prompt","display_name":"System Prompt","advanced":false,"input_types":["Message"],"dynamic":false,"info":"System prompt for the agent.","title_case":false,"type":"str"},"user_prompt":{"trace_as_input":true,"trace_as_metadata":true,"load_from_db":false,"list":false,"required":false,"placeholder":"","show":true,"value":"{input}","name":"user_prompt","display_name":"Prompt","advanced":true,"input_types":["Message"],"dynamic":false,"info":"This prompt must contain 'input' key.","title_case":false,"type":"str"}},"description":"Agent that uses tools. Only models that are compatible with function calling are supported.","icon":"LangChain","base_classes":["Message"],"display_name":"Yam Tool Calling Agent","documentation":"","custom_fields":{},"output_types":[],"pinned":false,"conditional_paths":[],"frozen":false,"outputs":[{"types":["Message"],"selected":"Message","name":"text_output","display_name":"Text","method":"run_agent","value":"__UNDEFINED__","cache":true}],"field_order":["system_prompt","input_value","user_prompt","handle_parsing_errors","memory","tools","llm","callbackList"],"beta":true,"edited":true},"id":"YamonToolCallingAgentCom-bwLIW","description":"Agent that uses tools. Only models that are compatible with function calling are supported.","display_name":"Yam Tool Calling Agent"},"selected":true,"width":384,"height":622,"positionAbsolute":{"x":197.60062512070573,"y":-19.027801533235007},"dragging":false}],"edges":[{"source":"CustomComponent-fpMef","sourceHandle":"{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-fpMefœ,œnameœ:œbasecallbackhandlerœ,œoutput_typesœ:[œBaseCallbackHandlerœ]}","target":"YamonToolCallingAgentCom-bwLIW","targetHandle":"{œfieldNameœ:œcallbackListœ,œidœ:œYamonToolCallingAgentCom-bwLIWœ,œinputTypesœ:[œBaseCallbackHandlerœ],œtypeœ:œotherœ}","data":{"targetHandle":{"fieldName":"callbackList","id":"YamonToolCallingAgentCom-bwLIW","inputTypes":["BaseCallbackHandler"],"type":"other"},"sourceHandle":{"dataType":"CustomComponent","id":"CustomComponent-fpMef","name":"basecallbackhandler","output_types":["BaseCallbackHandler"]}},"id":"reactflow__edge-CustomComponent-fpMef{œdataTypeœ:œCustomComponentœ,œidœ:œCustomComponent-fpMefœ,œnameœ:œbasecallbackhandlerœ,œoutput_typesœ:[œBaseCallbackHandlerœ]}-YamonToolCallingAgentCom-bwLIW{œfieldNameœ:œcallbackListœ,œidœ:œYamonToolCallingAgentCom-bwLIWœ,œinputTypesœ:[œBaseCallbackHandlerœ],œtypeœ:œotherœ}","className":""}],"viewport":{"zoom":1,"x":0,"y":0}},"is_component":false,"name":"Hilarious Kaku","description":"","id":"G1IE4"},"outputs":[{"types":["Message"],"selected":"Message","name":"YamonToolCallingAgentCom-bwLIW_text_output","display_name":"Text","method":"run_agent","value":"__UNDEFINED__","cache":true,"proxy":{"id":"YamonToolCallingAgentCom-bwLIW","name":"text_output","nodeDisplayName":"Yam Tool Calling Agent"}}],"official":false}},"id":"groupComponent-83Ize","position":{"x":0,"y":0},"type":"genericNode"}],"viewport":{"x":1,"y":1,"zoom":1}},"is_component":true}